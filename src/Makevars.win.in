# WIN is used in the usual rwinlib Makevars, but it seems WIN envvar is not
# available when configure.win is used. So, R_ARCH is chosen here.
TARGET = $(subst /x64,x86_64,$(subst /i386,i686,$(R_ARCH)))-pc-windows-gnu

# This is provided in Makevars.ucrt for R >= 4.2
TOOLCHAIN ?= stable-msvc

# TODO
VENDORING = yes

LIBDIR = ./rust/target/$(TARGET)/release
PKG_LIBS = -L$(LIBDIR) -lstring2path -lws2_32 -ladvapi32 -luserenv -lbcrypt
STATLIB = $(LIBDIR)/libstring2path.a

all: C_clean

$(SHLIB): $(STATLIB)

$(STATLIB):
	mkdir -p $(LIBDIR)/libgcc_mock
	if [ "$(GCC_MOCK)" = "yes" ]; then \
	  cd $(LIBDIR)/libgcc_mock && \
	    touch gcc_mock.c && \
	    $(CXX) -c gcc_mock.c -o gcc_mock.o && \
	    $(AR) -r libgcc_eh.a gcc_mock.o && \
	    cp libgcc_eh.a libgcc_s.a; \
	fi

	# vendoring (Note: to avoid NOTE of "Found the following hidden files and
	# directories", .cargo needs to be created here)
	if [ "$(VENDORING)" = "yes" ]; then \
	  $(TAR) --extract --xz -f ./rust/vendor.tar.xz -C ./rust && \
	    mkdir -p ./rust/.cargo && \
	    cp ./cargo_vendor_config.toml ./rust/.cargo/config.toml; \
	fi

	@BEFORE_CARGO_BUILD@ cd ./rust && cargo +$(TOOLCHAIN) build --target=$(TARGET) --lib --release --offline
	@AFTER_CARGO_BUILD@

C_clean:
	rm -Rf $(SHLIB) $(OBJECTS) ./rust/.cargo @CLEAN_EXTRA@

clean:
	rm -Rf $(SHLIB) $(OBJECTS) $(STATLIB) ./rust/.cargo ./rust/vendor ./rust/target

.PHONY: all C_clean clean
