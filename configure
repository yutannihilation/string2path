# NOTE:
# This is based on the configure script of the gifski package, (https://github.com/r-rust/gifski/),
# distributed under the MIT license, authored by Jeroen Ooms.

RSCRIPT="${R_HOME}/bin/Rscript"

# 1.41.0 is the min version among Debian and Ubuntu at the time of writing this
# (c.f. https://github.com/ron-rs/ron/issues/256#issuecomment-657999081)
# This might need bumped depending on the features the crate uses. cargo-msrv
# might be helpful to find the actual MSRV.
MIN_RUST_VERSION="1.41.0"

echo "NOT_CRAN: ${NOT_CRAN}"

GITHUB_REPO="yutannihilation/string2path"
CRATE_NAME="string2path"

# These need to be updated if the binary is changed
GITHUB_TAG="build_20210921-1"
SHA256SUM_X86_64="be65f074cb7ae50e5784e7650f48579fff35f30ff663d1c01eabdc9f35c1f87c"
SHA256SUM_ARM64="4a34f99cec66610746b20d456b1e11b346596c22ea1935c1bcb5ef1ab725f0e8"

# Even when `cargo` is on `PATH`, `rustc` might not. This should ensure PATH is
# configured correctly (c.f. https://github.com/yutannihilation/string2path/issues/4).
if [ -e "$HOME/.cargo/env" ]; then
  . $HOME/.cargo/env
fi

# Check if `cargo` command exists ----------------------------------------------

check_cargo() {
  echo "*** Checking if cargo is installed"

  cargo --version
  if [ $? -ne 0 ]; then
    echo ""
    echo "WARN: cargo not found"
    echo ""
    return 1
  fi

  echo "*** Checking if cargo is newer than the required version"

  # Check if the version is minimum required one. `-V` option of `sort` does
  # version sort, and `-C` is for silently checking if the input is already
  # sorted; so, if RUST_VERSION is smaller than MIN_RUST_VERSION, it fails.
  RUST_VERSION="`cargo --version | cut -d' ' -f2`"
  if ! printf '%s\n' "${MIN_RUST_VERSION}" "${RUST_VERSION}" | sort -C -V; then
    echo ""
    echo "WARN: The installed version of Rust (${RUST_VERSION}) is older than the requirement (${MIN_RUST_VERSION})"
    echo ""
    return 2
  fi

  return 0
}

check_cargo

# If cargo is confirmed fine, exit here. But, even if the cargo is not available
# or too old, it's not the end of the world. There might be a pre-compiled
# binary for the platform.
if [ $? -eq 0 ]; then

    echo "ok"
    echo ""

    sed \
      -e "s|@NOT_CRAN@|${NOT_CRAN}|" \
      -e 's|@CLEAN_EXTRA@|$(STATLIB)|' \
      src/Makevars.in > src/Makevars

    exit 0
fi



# Download the precompiled binary ----------------------------------------------

echo "*** Trying to download the precompiled binary"

if [ "`uname`" = "Darwin" ]; then
  # For some reason, it seems `uname -m` or `arch` cannot be used reliably (why?)
  # So, let's ask R.
  MAC_ARCH=`"${RSCRIPT}" -e 'cat(Sys.info()["machine"])'`
  case "${MAC_ARCH}" in
    x86_64)
      RUST_TARGET="x86_64-apple-darwin"
      SHA256SUM_EXPECTED="${SHA256SUM_X86_64}"
      ;;
    arm64)
      RUST_TARGET="aarch64-apple-darwin"
      SHA256SUM_EXPECTED="${SHA256SUM_ARM64}"
      ;;
    *)
      echo ""
      echo "ERROR: Unexpected arch: ${MAC_ARCH}"
      echo ""
      exit 5
  esac

  SRC="https://github.com/${GITHUB_REPO}/releases/download/${GITHUB_TAG}/${RUST_TARGET}-lib${CRATE_NAME}.a"
  DST="./src/rust/target/release/lib${CRATE_NAME}.a"

  echo "*** Download URL: ${SRC}"
  echo "*** Dest file: ${DST}"

  "${RSCRIPT}" ./tools/download_precompiled_binary.R "${SRC}" "${DST}"
  if [ $? -ne 0 ]; then
    echo ""
    echo "ERROR: Failed to download the pre-compiled binary"
    echo ""
    exit 2
  fi

  # Verify the checksum
  SHA256SUM_ACTUAL=`shasum -a 256 "${DST}" | cut -d' ' -f1`
  if [ -z "${SHA256SUM_ACTUAL}" ]; then
    echo ""
    echo "ERROR: Failed to get the checksum"
    echo ""
    exit 3
  fi

  if [ "${SHA256SUM_ACTUAL}" != "${SHA256SUM_EXPECTED}" ]; then
    echo ""
    echo "ERROR: The checksum of the downloaded binary doesn't match the expectated one"
    echo ""
    exit 4
  fi

  echo "Succeeded to download the precompied binary"
  echo ""

  sed \
    -e "s|@NOT_CRAN@|${NOT_CRAN}|" \
    -e 's|@CLEAN_EXTRA@||' \
    src/Makevars.in > src/Makevars

  exit 0
fi


# If cargo is not found, display a friendly message and exit with error. -------

echo "------------------ RUST COMPILER NOT FOUND --------------------"
echo ""
echo "Please refer to <https://www.rust-lang.org/tools/install>"
echo ""
echo "---------------------------------------------------------------"
echo ""

exit 1
