on:
  push:
    branches:
      - main
    tags:
      - 'windows*'
  pull_request:
    branches:
      - main

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: "${{ matrix.config.os }} (R: ${{ matrix.config.r }}, Rust: ${{ matrix.config.rust }})"

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release',    rust: 'stable'}
          - {os: macOS-latest,   r: 'release',    rust: 'stable'}
          - {os: ubuntu-20.04,   r: 'release',    rust: 'stable',  rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04,   r: 'devel',      rust: 'stable',  rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest", http-user-agent: "R/4.1.0 (ubuntu-20.04) R (4.1.0 x86_64-pc-linux-gnu x86_64 linux-gnu) on GitHub Actions" }
          - {os: ubuntu-20.04,   r: 'release',    rust: 'nightly', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          # Note: In the case of pure Rust code, the result binaries have no
          #       difference between the legacy toolchain and the UCRT toolchain.
          #       So, this is probably unnecessary, but leave this as-is as this
          #       might be eventually useful for other package that depends on
          #       some C/C++ library.
          - {os: windows-latest, r: 'devel-ucrt', rust: 'stable'}

    env:
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.rust }}
          default: true

      - name: Additional Rust set up for Windows
        if: runner.os == 'Windows'
        run: |
          rustup target add i686-pc-windows-gnu
          rustup target add x86_64-pc-windows-gnu

      - uses: r-lib/actions/setup-r@experimental-ucrt
        id: install-r
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Install pak and query dependencies
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          saveRDS(pak::pkg_deps("local::.", dependencies = TRUE), ".github/r-depends.rds")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.R_LIBS_USER }}/*
            !${{ env.R_LIBS_USER }}/pak
          key: ${{ matrix.config.os }}-${{ steps.install-r.outputs.installed-r-version }}-1-${{ hashFiles('.github/r-depends.rds') }}
          restore-keys: ${{ matrix.config.os }}-${{ steps.install-r.outputs.installed-r-version }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          pak::local_system_requirements(execute = TRUE)
          pak::pkg_system_requirements("rcmdcheck", execute = TRUE)
        shell: Rscript {0}

      - name: Install dependencies
        run: |
          pak::local_install_dev_deps(upgrade = TRUE)
          pak::pkg_install("rcmdcheck")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          options(crayon.enabled = TRUE)
          args <- c("--no-manual", "--as-cran")
          rcmdcheck::rcmdcheck(args = args, error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.config.os }}-r${{ matrix.config.r }}-results
          path: check

      # Upload prebuilt binaries for Windows
      - name: Tweak staticlib
        if: runner.os == 'Windows'
        run: |
          # list all staticlibs
          find ./check -name libstring2path.a

          mkdir ./staticlib

          if ( '${{ matrix.config.r }}'.EndsWith('ucrt') ) {
            $CRT_PREFIX='ucrt-'
          }

          # R-devel already drops 32bit Windows!
          if ( '${{ matrix.config.r }}'.StartsWith('devel') ) {
            mv ./check/string2path.Rcheck/00_pkg_src/string2path/src/rust/target/x86_64-pc-windows-gnu/release/libstring2path.a staticlib/${CRT_PREFIX}x86_64-pc-windows-gnu-libstring2path.a
          } else {
            mv ./check/string2path.Rcheck/00_pkg_src/string2path/src-x64/rust/target/x86_64-pc-windows-gnu/release/libstring2path.a staticlib/x86_64-pc-windows-gnu-libstring2path.a
            mv ./check/string2path.Rcheck/00_pkg_src/string2path/src-i386/rust/target/i686-pc-windows-gnu/release/libstring2path.a staticlib/i686-pc-windows-gnu-libstring2path.a
          }

          ls ./staticlib
        shell: pwsh

      - name: Upload staticlib
        uses: actions/upload-artifact@main
        with:
          name: staticlib
          path: staticlib

      - name: Don't use tar from old Rtools to store the cache
        if: ${{ runner.os == 'Windows' && startsWith(steps.install-r.outputs.installed-r-version, '3.6' ) }}
        shell: bash
        run: echo "C:/Program Files/Git/usr/bin" >> $GITHUB_PATH

  release:
    needs: R-CMD-check
    runs-on: ubuntu-latest
    # Do not run this on pull request
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - name: Checksum
        run: |
          cd staticlib
          sha256sum * > sha256sums.txt

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: 'staticlib/*'

