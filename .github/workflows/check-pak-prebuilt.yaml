on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: R-CMD-check (without Rust)

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }} ${{ matrix.config.c_runtime }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: windows-latest, r: 'devel'}
          - {os: windows-latest, r: 'devel',  c_runtime: 'ucrt'}
          # - {os: macOS-latest,   r: 'release'} # check if configure script works

    env:
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: Uninstall cargo
        run: |
          rm $(rustup which cargo)

      - uses: r-lib/actions/setup-r@v1
        id: install-r
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - name: Use UCRT
        if: runner.os == 'Windows' && matrix.config.c_runtime == 'ucrt'
        run: |
          echo "c:/rtools40/ucrt64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Download UCRT version of R, and setup ~/.Renviron
          Rscript.exe .github/workflows/scripts/download_ucrt_R.R

          # Install (c.f. https://github.com/r-lib/actions/blob/630f4c9d8b813f45d0327a2fc20eb264fd518450/setup-r/src/installer.ts#L314-L318)
          Start-Process 'cmd' @("/c ${env:TEMP}\\R-devel-win-ucrt.exe", '/VERYSILENT', '/SUPPRESSMSGBOXES', '/DIR=C:\R')
        shell: pwsh

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Install pak and query dependencies
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          saveRDS(pak::pkg_deps("local::.", dependencies = TRUE), ".github/r-depends.rds")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.R_LIBS_USER }}/*
            !${{ env.R_LIBS_USER }}/pak
          key: ${{ matrix.config.os }}-${{ steps.install-r.outputs.installed-r-version }}-1-${{ hashFiles('.github/r-depends.rds') }}
          restore-keys: ${{ matrix.config.os }}-${{ steps.install-r.outputs.installed-r-version }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          pak::local_system_requirements(execute = TRUE)
          pak::pkg_system_requirements("rcmdcheck", execute = TRUE)
        shell: Rscript {0}

      - name: Install dependencies
        run: |
          pak::local_install_dev_deps(upgrade = TRUE)
          pak::pkg_install("rcmdcheck")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          options(crayon.enabled = TRUE)
          args <- c("--no-manual", "--as-cran")
          # Win UCRT build doesn't have i686
          if (identical("${{ matrix.config.c_runtime }}", "ucrt")) {
            args <- c(args, "--no-multiarch")
          }
          rcmdcheck::rcmdcheck(args, error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.config.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Don't use tar from old Rtools to store the cache
        if: ${{ runner.os == 'Windows' && startsWith(steps.install-r.outputs.installed-r-version, '3.6' ) }}
        shell: bash
        run: echo "C:/Program Files/Git/usr/bin" >> $GITHUB_PATH
