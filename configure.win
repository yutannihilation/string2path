# NOTE:
# This is based on the configure script of the gifski package, (https://github.com/r-rust/gifski/),
# distributed under the MIT license, authored by Jeroen Ooms.

# 1.41.0 is the min version among Debian and Ubuntu at the time of writing this
# (c.f. https://github.com/ron-rs/ron/issues/256#issuecomment-657999081)
# This might need bumped depending on the features the crate uses. cargo-msrv
# might be helpful to find the actual MSRV.
MIN_CARGO_VERSION="1.41.0"

echo "NOT_CRAN: ${NOT_CRAN}"

GITHUB_REPO="yutannihilation/string2path"
CRATE_NAME="string2path"

# These need to be updated if the binary is changed
GITHUB_TAG="windows_20210908-3"
SHA256SUM_X86_64="26a05f6ee8c2f625027ffc77c97fc8ac9746a182f5bc53d64235999a02c0b0dc"
SHA256SUM_I686="ceda54184fb3bf9e4cbba86848cb2091ff5b77870357f94319f9215fadfa5b25"

# Even when `cargo` is on `PATH`, `rustc` might not. This should ensure PATH is
# configured correctly (c.f. https://github.com/yutannihilation/string2path/issues/4).
if [ -e "$HOME/.cargo/env" ]; then
  . $HOME/.cargo/env
fi

# Check if `cargo` command exists ----------------------------------------------

echo "*** Checking if cargo exists and the version is ok"

cargo --version
if [ $? -eq 0 ]; then

  # Check if the version is minimum required one. `-V` option of `sort` does
  # version sort, and `-C` is for silently checking if the input is already
  # sorted; so, if CARGO_VERSION is smaller than MIN_CARGO_VERSION, it fails.
  CARGO_VERSION="`cargo --version | cut -d' ' -f2`"
  if printf '%s\n' "${MIN_CARGO_VERSION}" "${CARGO_VERSION}" | sort -C -V; then
    echo "ok"
    echo ""
    exit 0
  fi

  # Even if the cargo is too old, it's not the end of the world. There might be
  # a pre-compiled binary
  echo ""
  echo "WARN: The installed version of cargo (${CARGO_VERSION}) is older than the requirement (${MIN_CARGO_VERSION})"
  echo ""
fi


# Download the precompiled binary ----------------------------------------------

echo "*** Trying to download the precompiled binary"

if [ "`uname -m`" = "x86_64" ]; then
  RUST_TARGET="x86_64-pc-windows-gnu"
  SHA256SUM_EXPECTED="${SHA256SUM_X86_64}"
elif [ "`uname -m`" = "i686" ]; then
  RUST_TARGET="i686-pc-windows-gnu"
  SHA256SUM_EXPECTED="${SHA256SUM_I686}"
fi

SRC="https://github.com/${GITHUB_REPO}/releases/download/${GITHUB_TAG}/${CRT_PREFIX}${RUST_TARGET}-lib${CRATE_NAME}.a"
DST="./src/rust/target/${RUST_TARGET}/release/lib${CRATE_NAME}.a"

echo "*** Download URL: ${SRC}"
echo "*** Dest file: ${DST}"

Rscript ./tools/download_precompiled_binary.R "${SRC}" "${DST}"

if [ $? -ne 0 ]; then
  echo ""
  echo "ERROR: Failed to download the pre-compiled binary"
  echo ""
  exit 2
fi

# Check the hashsum
SHA256SUM_ACTUAL=`sha256sum "${DST}" | cut -d' ' -f1`
if [ -z "${SHA256SUM_ACTUAL}" ]; then
  echo ""
  echo "ERROR: Failed to get the checksum"
  echo ""
  exit 3
fi

if [ "${SHA256SUM_ACTUAL}" != "${SHA256SUM_EXPECTED}" ]; then
  echo ""
  echo "ERROR: The hashsum of the downloaded binary doesn't match the expectated one"
  echo ""
  exit 4
fi

echo "Succeeded to download the precompied binary"
echo ""
exit 0


# If cargo is not found, display a friendly message and exit with error. -------

echo "------------------ RUST COMPILER NOT FOUND --------------------"
echo ""
echo "Please refer to <https://www.rust-lang.org/tools/install>"
echo ""
echo "---------------------------------------------------------------"
echo ""

exit 1
